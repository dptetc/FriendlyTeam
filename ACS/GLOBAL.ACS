#include "zcommon.acs"

// Engineer Ammo Regen
script 987 (void)
{
	AmbientSound("IMPORTANTITEMS", 127);
	GiveInventory("CrateAmmo", 1);
	GiveInventory("SentryDefaultAmmo", 1);
	GiveInventory("SentryRocketAmmo", 1);
	GiveInventory("SentryPlasmaAmmo", 1);
	FadeTo(128, 128, 128, 1966, 0);
	Delay(5);
	FadeTo(128, 128, 128, 0, 0);
	Terminate;
}

// Medic Health Regen
script 988 (void)
{
	AmbientSound("Healing", 127);
	GiveInventory("HealthBonus", 10);
	FadeTo(255, 0, 0, 1966, 0);
	Delay(5);
	FadeTo(255, 0, 0, 0, 0);
	Terminate;
}

//Minigun Sentry Mode
script 900 (void)
{
	setfont("BIGFONT");
	HudMessageBold(s:"Minigun Sentry Mode"; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.44, 0.35, 0.35, 0.35);
	terminate;
}

//Minigun Sentry Mode
script 901 (void)
{
	setfont("BIGFONT");
	HudMessageBold(s:"Plasma Sentry Mode"; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.44, 0.35, 0.35, 0.35);
	terminate;
}

//Minigun Sentry Mode
script 902 (void)
{
	setfont("BIGFONT");
	HudMessageBold(s:"Rocket Sentry Mode"; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.44, 0.35, 0.35, 0.35);
	terminate;
}

//Turret Limit
#define NUM_TURRET_TYPES 3
int TurretTypes[NUM_TURRET_TYPES] =
{
	"PlayerSentryGun",
	"PlayerRocketSentryGun",
	"PlayerPlasmaSentryGun"
};

// Called by wrench to limit max. turrets.
script 800 (int type)
{
	if (ThingCountName(TurretTypes[type], 0) >= 3)
	{
		SetHudSize(640, 480, 0);
		SetFont("BIGFONT");
		HudMessage(s:"Only 3 turrets max"; HUDMSG_FADEOUT, 10, CR_RED, 320.0, 240.0, 1.0);
		SetResultValue(255);
		terminate;
	}
	SetResultValue(0);
}

//Hud Scaler [Trigger::Spawn]
script 300 ENTER
{
	if (GetCVar("hud_scale")<1)
	{
		consolecommand("hud_scale 1");
	}
}

//Hud Scaler [Trigger::Respawn]
script 301 RESPAWN
{
	if (GetCVar("hud_scale")<1)
	{
		consolecommand("hud_scale 1");
	}
}

//Hud Scaler [Trigger::Open]
script 302 OPEN
{
	if (GetCVar("hud_scale")<1)
	{
		consolecommand("hud_scale 1");
	}
}

script 305 ENTER
{
	If (GameType() != GAME_SINGLE_PLAYER)
	{
		Delay(0);
	}
	else
	{
		//GiveInventory("MegaSphere",9999999999999999999999999);
		Terminate;
	}
}